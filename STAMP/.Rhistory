geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
scale_fill_discrete(breaks=c(g1, g2)) +
coord_flip()
p2
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
theme(legend.position="none") +
coord_flip()
p2
p2 <- p2 + + scale_fill_discrete(breaks=c(g1, g2))
p2 <- p2 + scale_fill_discrete(breaks=c(g1, g2))
p2
p2 <- p2 + scale_fill_discrete(labels=c(g1, g2))
p2
?ggarrange
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
theme(legend.position="none") +
coord_flip()
ggarrange(p1,p2,widths=c(3/5, 2/5),ncol = 2, nrow = 1, labels = c(g1, g2))
ggarrange(p1,p2,widths=c(3/5, 2/5),ncol = 2, nrow = 1)
g1
g2
p2 <- p2 + scale_fill_discrete(labels=c(g1, g2))
p2
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
# theme(legend.position="none") +
coord_flip()
p2 <- p2 + scale_fill_discrete(labels=c(g1, g2))
p2
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
scale_fill_discrete(labels=c(g1, g2)) +
# theme(legend.position="none") +
coord_flip()
p2
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
theme(legend.position="none") +
coord_flip()
p2
p1 <- ggplot(newdf, aes(x=Genus, y=value, fill=variable)) +
geom_bar(stat ="summary",fun.y = mean,width = 0.3, color = "black", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position='top') +
labs(x = "", y = 'Mean Proportion') +
coord_flip()
p1
View(newdf)
newdf <- df[,c(1,2,3)]
colnames(newdf) <- c('Genus', g1, g2)
newdf['Genus'] <- factor(newdf$Genus, levels = newdf$Genus)
newdf <- melt(newdf)
p1 <- ggplot(newdf, aes(x=Genus, y=value, fill=variable)) +
geom_bar(stat ="summary",fun.y = mean,width = 0.3, color = "black", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.position='top') +
labs(x = "", y = 'Mean Proportion') +
coord_flip()
p1 <- ggplot(newdf, aes(x=Genus, y=value, fill=variable)) +
geom_bar(stat ="summary",fun.y = mean,width = 0.3, color = "black", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title=element_blank(),
legend.position='top') +
labs(x = "", y = 'Mean Proportion') +
coord_flip()
p1
s = '07_FunctionPrediction'
grep('FunctionPrediction',s)
grep('08',s)
grep('07',s)
if (grep('07',s)){}
if (grep('07',s)){print('hh')}
if (grep('08',s)){print('hh')}
if (grepl('08',s)){print('hh')}
if (grepl('07',s)){print('hh')}
ggsave(gsub('csv', 'png', file), width = 20, height = 15, units = 'cm', dpi = 600)
gsub('csv', 'png', file
)
ggsave(gsub('csv', 'png', file), width = 30, height = 15, units = 'cm', dpi = 600)
file <- 'E:/Desktop/t-test.csv'
df <- read.csv(file, check.names = F)
df <- df[df['Pvalue'] < 0.05,]
df <- na.omit(df)
df['Mean'] <- (df[,2] + df[,3]) / 2
df <- df[order(df['Mean']),]
g1 <- gsub('_MeanRel\\(%\\)', '', colnames(df)[2])
g2 <- gsub('_MeanRel\\(%\\)', '', colnames(df)[3])
group <- c()
for (i in 1:nrow(df)){
g1_mean <- df[i,2]
g2_mean <- df[i,3]
group[i] <- ifelse(g1_mean > g2_mean, g1, g2)
}
df['Group'] <- group
newdf <- df[,c(1,2,3)]
colnames(newdf) <- c('Genus', g1, g2)
newdf['Genus'] <- factor(newdf$Genus, levels = newdf$Genus)
newdf <- melt(newdf)
p1 <- ggplot(newdf, aes(x=Genus, y=value, fill=variable)) +
geom_bar(stat ="summary",fun.y = mean,width = 0.3, color = "black", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title=element_blank(),
legend.position='top') +
labs(x = "", y = 'Mean Proportion') +
coord_flip()
colnames(df)[c(5,6,7)] <- c('dp','lowerCI', 'upperCI')
df['pvalue'] <- seq(0,1, 1 / nrow(df))[-1]
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
theme(legend.position="none") +
coord_flip()
p2 <- p2 + scale_fill_discrete(labels=c(g1, g2))
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
theme(legend.position="none") +
coord_flip()
ggarrange(p1,p2,widths=c(3/5, 2/5),ncol = 2, nrow = 1)
if (grepl('FunctionPrediction',s)){
ggsave(gsub('csv', 'png', file), width = 30, height = 15, units = 'cm', dpi = 600)
}else{
ggsave(gsub('csv', 'png', file), width = 20, height = 15, units = 'cm', dpi = 600)
}
ggsave(gsub('csv', 'pdf', file), width = 14, height = 10)
p2 <- ggplot(df, aes(x=pvalue, y=dp, color=Group)) +
geom_point() +
scale_shape_manual(values = 19) +
geom_errorbar(aes(ymin=lowerCI, ymax=upperCI), width=0.025,
position=position_dodge(0.05)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank()) +
labs(x = 'pvalue', y = 'Difference in mean proportion') +
scale_x_continuous(breaks = seq(0, 1, 1 / nrow(df))[-1], labels = format(df$Pvalue, digits = 2), position = "top") +
geom_hline(aes(yintercept=0), colour="#E69F00", linetype="dashed") +
theme(legend.position="top") +
coord_flip()
ggarrange(p1,p2,widths=c(3/5, 2/5),ncol = 2, nrow = 1)
if (grepl('FunctionPrediction',s)){
ggsave(gsub('csv', 'png', file), width = 30, height = 15, units = 'cm', dpi = 600)
}else{
ggsave(gsub('csv', 'png', file), width = 20, height = 15, units = 'cm', dpi = 600)
}
file <- 'E:/Desktop/Class_group_top10.csv'
df <- read.csv(file = file, header = T, row.names = 1)
file <- 'E:/Desktop/Class_group_top10.csv'
df <- read.csv(file = file, header = T, row.names = 1)
View(df)
data <- df[rownames(df) %in% unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
View(data)
unlist(strsplit('S_vs_C_vs_E',"_vs_"))
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- as.character(data$Var2)
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
library(reshape2)
library(ggplot2)
library(RColorBrewer)
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- as.factor(data$Var2)
data$Var2 <- as.character(data$Var2)
data$Var2 <- as.factor(data$Var2)
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
data$Var2 <- as.factor(data$Var2, levels=data$Var2)
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- as.factor(data$Var2, levels=data$Var2)
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- as.character(data$Var2)
data$Var2 <- droplevels(data$Var2)
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- droplevels(data$Var2)
data$Var2 <- factor(data$Var2, levels = data$Var2)
data$Var2 <- as.character(data$Var2)
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
library(reshape2)
library(ggplot2)
library(RColorBrewer)
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
data$Var2 <- factor(data$Var2, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_")))
data$Var2 <- as.character(data$Var2)
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
library(reshape2)
library(ggplot2)
library(RColorBrewer)
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- droplevels(data$Var2)
data$Var2 <- factor(data$Var2, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_")))
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
library(reshape2)
library(ggplot2)
library(RColorBrewer)
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
ggplot(data, aes(y=Var2, x=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5))
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5))
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_"))))) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
unlist(strsplit('S_vs_C_vs_E',"_vs_"))))
unlist(strsplit('S_vs_C_vs_E',"_vs_"))
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_")))) +
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_")))) +
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_"))))) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
)
)))
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_"))))) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_"))))) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5))
ggplot(data, aes(x=Var2, y=value, fill=Var1, factor(x, levels = unlist(strsplit('S_vs_C_vs_E',"_vs_"))))) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
levels
unlist(strsplit('S_vs_C_vs_E',"_vs_"))
ggplot(data, aes(x=Var2, y=value, fill=Var1)))) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
rev(unlist(strsplit('S_vs_C_vs_E',"_vs_")))
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
data <- melt(data)
data$Var2 <- droplevels(data$Var2)
data$Var2 <- factor(data$Var2, levels = rev(unlist(strsplit('S_vs_C_vs_E',"_vs_"))))
##设置颜色
mycol<-c(brewer.pal(9, "Set1"),brewer.pal(12, "Paired"),brewer.pal(12, "Set3"))
library(reshape2)
library(ggplot2)
library(RColorBrewer)
ggplot(data, aes(x=Var2, y=value, fill=Var1)) +
geom_bar(stat = "identity", position = 'fill') +
theme_bw() +
theme(panel.grid=element_blank(),axis.line=element_line(size=0.5,colour="black")) +
# # Remove x y axis title
# theme(axis.title.x = element_blank()) +
# theme(axis.title.y = element_blank()) +
labs(x = "", y = "Relative abundance", title = "") +
theme(legend.title=element_blank()) +
scale_fill_manual(values = mycol) +
theme(axis.text.x = element_text(size = 10, vjust = 0.5, hjust = 0.5)) +
coord_flip()
file <- 'E:/Desktop/Class_top10.csv'
df <- read.csv(file = file, header = T, row.names = 1)
data <- df[unlist(strsplit('S_vs_C_vs_E',"_vs_")),]
data <- as.matrix(t(data))
data <- data[order(data[,1],decreasing =F),]
